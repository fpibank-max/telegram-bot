from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from flask import Flask
from threading import Thread

TOKEN = "8140060242:AAE9pXwvRIOFY92Yfmr3ddbE4Xt51Ger-8s"  # ЗАМЕНИ НА СВОЙ ТОКЕН!
NICKNAME, AMOUNT = range(2)

app = Flask('')

@app.route('/')
def home():
    return "Bot is running!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Добро пожаловать!\nЯ - Бот, который может выдавать\nбесплатные робуксы",
        reply_markup=ReplyKeyboardMarkup([['Далее']], one_time_keyboard=True)
    )
    return NICKNAME

async def get_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == 'Далее':
        await update.message.reply_text(
            "Пожалуйста, введите ваш никнейм",
            reply_markup=ReplyKeyboardRemove()
        )
        return NICKNAME
    
    context.user_data['nickname'] = update.message.text
    await update.message.reply_text(
        "Напишите сумму робуксов которую вы хотите вывести.\nСумма должна быть 10-500 Робуксов"
    )
    return AMOUNT

async def get_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = int(update.message.text)
        if 10 <= amount <= 500:
            wait_msg = await update.message.reply_text("Подождите...")
            await wait_msg.edit_text("Вывод робуксов...")
            await wait_msg.edit_text("Успешно✅")
            await update.message.reply_text("Подождите около одного дня, после этого робуксы поступят на ваш счет!")
        else:
            await update.message.reply_text("Сумма должна быть от 10 до 500!")
            return AMOUNT
    except ValueError:
        await update.message.reply_text("Введите число!")
        return AMOUNT
    return ConversationHandler.END

def main():
    keep_alive() 
    
    bot_app = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            NICKNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_nickname)],
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_amount)]
        },
        fallbacks=[]
    )
    
    bot_app.add_handler(conv_handler)
    bot_app.run_polling()

if __name__ == '__main__':
    main()
